//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ScriptableObjects/KokomiControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KokomiControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KokomiControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KokomiControls"",
    ""maps"": [
        {
            ""name"": ""KokomiActions"",
            ""id"": ""17653e24-7dd8-4857-ba3e-e45c7e37ea71"",
            ""actions"": [
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""d561b658-1377-4be8-afc4-81d72b1270b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ultimate"",
                    ""type"": ""Button"",
                    ""id"": ""cbcd09c5-5236-4af2-a368-cd2892933610"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""25bad4cc-094a-4a8b-98a6-85ae8ae15898"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9d81be60-d5de-491f-81cd-46da0e441e26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8b67217-2113-4863-b16f-c2b90b9e3b4d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf26c34e-9a75-4acd-93dc-56ead06ce2d8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ultimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e9e788f-efb9-4ba0-aa12-83197b989f4a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""614ffe7e-ec38-4f5f-b961-2f5867525e21"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold,MultiTap(tapCount=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KokomiMovement"",
            ""id"": ""24e103d5-5280-491d-9d3d-2a6b8791ae34"",
            ""actions"": [
                {
                    ""name"": ""MovementInputs"",
                    ""type"": ""Value"",
                    ""id"": ""63290c6c-c1b8-4967-b823-b7fa4de97130"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""54810bbc-8e36-4acb-a838-47bb20e0d288"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b858db5b-3aaa-4129-8480-d59e92adf263"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7b44626-472a-4358-9384-a0082832f5e9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4592b6f5-f8c2-4c77-b0a0-c39ea43b56c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""259eddc1-cc21-441d-8b04-2f3f6afde754"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""96509a16-a1ed-4640-ba38-a6896b3fb284"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""4aeed9d3-5ab2-43b9-a88d-8a66fbb10bb0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInputs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KokomiActions"",
            ""bindingGroup"": ""KokomiActions"",
            ""devices"": []
        }
    ]
}");
        // KokomiActions
        m_KokomiActions = asset.FindActionMap("KokomiActions", throwIfNotFound: true);
        m_KokomiActions_Skill = m_KokomiActions.FindAction("Skill", throwIfNotFound: true);
        m_KokomiActions_Ultimate = m_KokomiActions.FindAction("Ultimate", throwIfNotFound: true);
        m_KokomiActions_Attack = m_KokomiActions.FindAction("Attack", throwIfNotFound: true);
        m_KokomiActions_Jump = m_KokomiActions.FindAction("Jump", throwIfNotFound: true);
        // KokomiMovement
        m_KokomiMovement = asset.FindActionMap("KokomiMovement", throwIfNotFound: true);
        m_KokomiMovement_MovementInputs = m_KokomiMovement.FindAction("MovementInputs", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KokomiActions
    private readonly InputActionMap m_KokomiActions;
    private List<IKokomiActionsActions> m_KokomiActionsActionsCallbackInterfaces = new List<IKokomiActionsActions>();
    private readonly InputAction m_KokomiActions_Skill;
    private readonly InputAction m_KokomiActions_Ultimate;
    private readonly InputAction m_KokomiActions_Attack;
    private readonly InputAction m_KokomiActions_Jump;
    public struct KokomiActionsActions
    {
        private @KokomiControls m_Wrapper;
        public KokomiActionsActions(@KokomiControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skill => m_Wrapper.m_KokomiActions_Skill;
        public InputAction @Ultimate => m_Wrapper.m_KokomiActions_Ultimate;
        public InputAction @Attack => m_Wrapper.m_KokomiActions_Attack;
        public InputAction @Jump => m_Wrapper.m_KokomiActions_Jump;
        public InputActionMap Get() { return m_Wrapper.m_KokomiActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KokomiActionsActions set) { return set.Get(); }
        public void AddCallbacks(IKokomiActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_KokomiActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KokomiActionsActionsCallbackInterfaces.Add(instance);
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
            @Ultimate.started += instance.OnUltimate;
            @Ultimate.performed += instance.OnUltimate;
            @Ultimate.canceled += instance.OnUltimate;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IKokomiActionsActions instance)
        {
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
            @Ultimate.started -= instance.OnUltimate;
            @Ultimate.performed -= instance.OnUltimate;
            @Ultimate.canceled -= instance.OnUltimate;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IKokomiActionsActions instance)
        {
            if (m_Wrapper.m_KokomiActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKokomiActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_KokomiActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KokomiActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KokomiActionsActions @KokomiActions => new KokomiActionsActions(this);

    // KokomiMovement
    private readonly InputActionMap m_KokomiMovement;
    private List<IKokomiMovementActions> m_KokomiMovementActionsCallbackInterfaces = new List<IKokomiMovementActions>();
    private readonly InputAction m_KokomiMovement_MovementInputs;
    public struct KokomiMovementActions
    {
        private @KokomiControls m_Wrapper;
        public KokomiMovementActions(@KokomiControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementInputs => m_Wrapper.m_KokomiMovement_MovementInputs;
        public InputActionMap Get() { return m_Wrapper.m_KokomiMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KokomiMovementActions set) { return set.Get(); }
        public void AddCallbacks(IKokomiMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_KokomiMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KokomiMovementActionsCallbackInterfaces.Add(instance);
            @MovementInputs.started += instance.OnMovementInputs;
            @MovementInputs.performed += instance.OnMovementInputs;
            @MovementInputs.canceled += instance.OnMovementInputs;
        }

        private void UnregisterCallbacks(IKokomiMovementActions instance)
        {
            @MovementInputs.started -= instance.OnMovementInputs;
            @MovementInputs.performed -= instance.OnMovementInputs;
            @MovementInputs.canceled -= instance.OnMovementInputs;
        }

        public void RemoveCallbacks(IKokomiMovementActions instance)
        {
            if (m_Wrapper.m_KokomiMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKokomiMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_KokomiMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KokomiMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KokomiMovementActions @KokomiMovement => new KokomiMovementActions(this);
    private int m_KokomiActionsSchemeIndex = -1;
    public InputControlScheme KokomiActionsScheme
    {
        get
        {
            if (m_KokomiActionsSchemeIndex == -1) m_KokomiActionsSchemeIndex = asset.FindControlSchemeIndex("KokomiActions");
            return asset.controlSchemes[m_KokomiActionsSchemeIndex];
        }
    }
    public interface IKokomiActionsActions
    {
        void OnSkill(InputAction.CallbackContext context);
        void OnUltimate(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IKokomiMovementActions
    {
        void OnMovementInputs(InputAction.CallbackContext context);
    }
}
